<?php

/**
 * @file
 * Hook implementations, callbacks form OpenID SSO.
 */

/**
 * Implementation of hook_menu().
 */
function openid_sso_menu() {
  $items = array();
  $items['sso'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_sso_login_form'),
    'access callback' => 'openid_sso_login_access',
  );
  return $items;
}

/**
 * Implementation of hook_strongarm().
 */
function openid_sso_strongarm() {
  return array (
    // No email verification as users can only sign in from trusted provider.
    'user_email_verification' => 0,
    // We must allow user registration otherwise OpenID will refuse to register
    // user. We will suppress user/register in hook_menu_alter().
    'user_register' => '1',
  );
}

/**
 * Access callback for login page.
 */
function openid_sso_login_access() {
  global $user;
  if (empty($user->uid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Simplified login form.
 *
 * Compare to openid_form_alter().
 *
 * @todo: Smoothen out user name retrieval, will require adjustments to
 * provider.
 * '#description' => l(t('Forgot your user name?'), trim(variable_get('openid_sso_provider', ''), '/') .'/user/password'),
 */
function openid_sso_login_form() {
  $provider = variable_get('openid_sso_provider', 'SSO Web');
  $form = array();
  if (!empty($_GET['identifier'])) {
    drupal_add_js(drupal_get_path('module', 'openid_sso') .'/openid_sso.js');
    $form['message']['#value'] = '<h3>'. t('Hello @name &ndash; you are being logged in automatically', array('@name' => $_GET['identifier'])) .'</h3>';
    $form['message']['#value'] .= '<p>'. t('If page does not redirect within 3 seconds, click "Log in" button below.') .'</p>';
    $form['#attributes'] = array('class' => 'auto-submit');
  }
  $form['openid_identifier'] = array(
    '#type' => 'textfield',
    '#title'=> t('Your !provider user name', array('!provider' => $provider['name'])),
    '#description' => l(t('New? Get !provider account', array('!provider' => $provider['name'])), $provider['url'], array('query' => 'q=user/register&relying_party='. variable_get('site_name', 'Drupal'))),
    '#default_value' => check_plain(urldecode($_GET['identifier'])),
    '#maxlength' => 255,
    // Use prefix/suffix instead of #attributes as we'd like to hide the label, too.
    '#prefix' => empty($_GET['identifier']) ? NULL : '<div style="display:none">',
    '#suffix' => empty($_GET['identifier']) ? NULL : '</div>',
  );
  $form['#validate'] = array('openid_sso_login_form_validate');
  $form['openid.return_to'] = array('#type' => 'hidden', '#value' => url('openid/authenticate', array('absolute' => TRUE, 'query' => drupal_get_destination())));
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
  );
  return $form;
}

/**
 * Submit hook for openid_sso_login_form().
 *
 * Compare to openid_login_validate().
 */
function openid_sso_login_form_validate($form, &$form_state) {
  $return_to = $form_state['values']['openid.return_to'];
  if (empty($return_to)) {
    $return_to = url('', array('absolute' => TRUE));
  }
  $provider = variable_get('openid_sso_provider', '');
  openid_begin($provider['url'] .'/openid/'. urlencode($form_state['values']['openid_identifier']), $return_to, $form_state['values']);
}
