<?php

/**
 * @file
 * Hook implementations, callbacks form OpenID SSO.
 */

/**
 * Implementation of hook_strongarm().
 */
function openid_sso_strongarm() {
  return array (
    // No email verification as users can only sign in from trusted provider.
    'user_email_verification' => 0,
    // We must allow user registration otherwise OpenID will refuse to register
    // user. We will suppress user/register in hook_menu_alter().
    'user_register' => '1',
  );
}

/**
 * Implementation of hook_menu().
 */
function openid_sso_menu() {
  $items = array();
  // Move log in page to login/direct. See how openid_sso_menu_alter() replaces
  // log in.
  $items['login/direct'] = array(
    'title' => 'Direct log in',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_login'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function openid_sso_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login') {
    $form['#redirect'] = '';
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function openid_sso_menu_alter(&$items) {
  // Disable user registration page to suppress direct registration.
  $items['user/register']['page callback'] = 'openid_sso_request_redirect';
  // Override the user page callback to replace it with our own login form.
  $items['user']['page callback'] = 'openid_sso_user_page';
}

/**
 * Custom menu callback for user/ page.
 */
function openid_sso_user_page() {

  // If user is logged in, just pass on to original user page.
  global $user;
  if ($user->uid) {
    return user_page();
  }

  // If there is an identifier passed in in GET request, issue an OpenID
  // authentication request.
  //
  // Compare to openid_form_alter().
  //
  // @todo: this opens a vulnerability to DOS attacks causing repeated
  // authentication requests triggered by an attacker issuing GET requests with
  // an identifier against this URL.
  //
  if ($_GET['identifier']) {
    $provider = variable_get('openid_sso_provider', '');
    $values = array(
      'openid_identifier' => $provider['url'] .'openid/'. urlencode($_GET['identifier']),
      'openid.return_to' => url('openid/authenticate', array('absolute' => TRUE, 'query' => drupal_get_destination())),
    );
    openid_begin($values['openid_identifier'], $values['openid.return_to'], $values);
  }

  // Otherwise redirect to trusted OpenID Provider.
  openid_sso_request_redirect();
}

/**
 * Start an SSO request by redirecting the user to the provider.
 */
function openid_sso_request_redirect() {
  $provider = variable_get('openid_sso_provider', array());
  $realm = urlencode(url('', array('absolute' => TRUE)));
  drupal_goto($provider['url'], "q=sso-request&realm=$realm");
}
